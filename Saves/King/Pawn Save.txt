public class Pawn extends ChessPiece {

	public Pawn(Player player) {
		super(player);
	}

	public String type() {
		return "Pawn";
	}
	/*
	Private helper method that checks if move is valid for pawn piece
	returns boolean 
	*/
	
	
	private boolean pawnIsValidMove(Move move, ChessPiece[][] board)
	{

		
		
		int rowDiff = move.toRow - move.fromRow;
		int colDiff = move.toColumn - move.fromColumn;

		boolean validMove = false;


		// checks if player is black
		if(this.player() == Player.BLACK)
		{
			// checks if the move is forward
			if(rowDiff > 0)
			{



				//************************
				// checks if diagonal move
				// ************************


				if(rowDiff - Math.abs(colDiff) == 0)
				{	
					// checks that the diagonal move is not more than 1
					if(rowDiff == 1 && Math.abs(colDiff) == 1)
					{
						// checks if the diagonal move contains an enemy player
						if(board[move.toRow][move.toColumn] != null && board[move.toRow][move.toColumn].player() != board[move.fromRow][move.fromColumn].player())
						{
							validMove = true;
						}
						else{/* the position the pawn is moving to has an allied player or no player
						 	 is invalid move for pawn */}
					}
					else{/* the diagonal move is not 1 */}
				}




				// ************************
				// the move is not diagonal
				//*************************


				else
				{



					//****************************** */
					// checks if in starting position
					// ********************************

					if(move.fromRow == 1)
					{
						// checks if the move is less than or equal to 2 and forward
						if(rowDiff <= 2 && colDiff == 0)
						{


							// if the pawn is moving forward 2


							if(rowDiff == 2)
							{
								// checks if there is no player in the way
								if(board[move.toRow][move.toColumn] == null && board[move.toRow - 1][move.fromColumn] == null)
								{
									validMove = true;
								}
							}


							// the pawn is only moving 1 space


							else
							{
								if(board[move.toRow][move.toColumn] == null)
								{
									validMove = true;
								}
							}
						}
						

					}




					// ****************************************
					// the pawn is not in the starting position
					// ****************************************



					else
					{
						// checks if the pawn is moving forward 1 and sideways none
						if(rowDiff == 1 && colDiff == 0)
						{
							// checks if the place the pawn is trying to move has no player there
							if(board[move.toRow][move.toColumn] == null)
							{
								validMove = true;
							}
						}
					}
				}
			}
		}





		// *********************
		// player is white
		// *********************



		else
		{
			
			// checks if the move is forward
			if(rowDiff < 0)
			{




				// checks if diagonal move



				if(Math.abs(rowDiff) - Math.abs(colDiff) == 0)
				{	
					// checks that the diagonal move is not more than 1
					if(rowDiff == -1 && Math.abs(colDiff) == 1)
					{
						// checks if the diagonal move contains and enemy player
						if(board[move.toRow][move.toColumn] != null && board[move.toRow][move.toColumn].player() != board[move.fromRow][move.fromColumn].player())
						{
							validMove = true;
						}
					}
				}





				// the move is not diagonal



				else
				{


					// checks if in starting position



					if(move.fromRow == 6)
					{
						// checks if the move is less than or equal to 2 and forward
						if(rowDiff >= -2 && colDiff == 0)
						{


							// if the pawn is moving forward 2
							if(rowDiff == -2)
							{
								// checks if there is no player in the way
								if(board[move.toRow][move.toColumn] == null && board[move.fromRow - 1][move.fromColumn] == null)
								{
									validMove = true;
								}
							}


							// Pawn is moving forward 1
							else
							{
								if(board[move.toRow][move.toColumn] == null)
								{
									validMove = true;
								}
							}
						}
					}



					// the pawn is not in the starting position


					else
					{
						// checks if the pawn is moving forward 1 and sideways none
						if(rowDiff == -1 && colDiff == 0)
						{
							// checks if the place the pawn is trying to move has no player there
							if(board[move.toRow][move.toColumn] == null)
							{
								validMove = true;
							}
						}
					}

				}
			}
		}

		return validMove;
	}


		public boolean isValidMove(Move move, ChessPiece[][] board)
		{
			
			boolean isValidMove = false;
			
			
			if(super.isValidMove(move, board) == true)
			{
				if(pawnIsValidMove(move, board) == true)
				{

					isValidMove = true;
				}
			}
			return isValidMove;
		}	
}	
			
		